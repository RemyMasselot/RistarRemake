//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""LAND"",
            ""id"": ""0d280664-e35a-4520-9ab0-b94cf2c2ff0b"",
            ""actions"": [
                {
                    ""name"": ""MOVE"",
                    ""type"": ""Value"",
                    ""id"": ""c6bb8ecd-e53b-4138-9bbd-c1f6bee0de0e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""Button"",
                    ""id"": ""074f1c53-ea4a-4f0f-ad48-5d7f04de9362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""59dd6619-c4d8-42cd-aa64-35ea0b056ceb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a6795858-9f2c-42d7-89d5-7f2f6a3ea37c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75d4dd8e-961f-4dab-bed7-f8d7180d030e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""QD"",
                    ""id"": ""b5e3e7ec-bf74-4dca-aefd-27218c223401"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aa97c214-a722-4140-adbb-c23f6872bd95"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d9db7d63-677b-4845-acb8-d5f20026ed57"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GAMEPAD"",
                    ""id"": ""10c0434b-2924-4577-9fc9-bc3acae04d2d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""95542719-9f87-40d8-a305-25830f9ffb9d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""690781d4-3689-48cb-90b2-ce8919fc0e66"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""97eada6c-2c4f-46a4-a48c-4ecff31de6d7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16d3398b-1e37-43cf-99db-6a6a35697cc2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WALL"",
            ""id"": ""002b5fcb-2601-4f3c-b052-5fd157f2516c"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // LAND
        m_LAND = asset.FindActionMap("LAND", throwIfNotFound: true);
        m_LAND_MOVE = m_LAND.FindAction("MOVE", throwIfNotFound: true);
        m_LAND_JUMP = m_LAND.FindAction("JUMP", throwIfNotFound: true);
        // WALL
        m_WALL = asset.FindActionMap("WALL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LAND
    private readonly InputActionMap m_LAND;
    private List<ILANDActions> m_LANDActionsCallbackInterfaces = new List<ILANDActions>();
    private readonly InputAction m_LAND_MOVE;
    private readonly InputAction m_LAND_JUMP;
    public struct LANDActions
    {
        private @Controller m_Wrapper;
        public LANDActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVE => m_Wrapper.m_LAND_MOVE;
        public InputAction @JUMP => m_Wrapper.m_LAND_JUMP;
        public InputActionMap Get() { return m_Wrapper.m_LAND; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LANDActions set) { return set.Get(); }
        public void AddCallbacks(ILANDActions instance)
        {
            if (instance == null || m_Wrapper.m_LANDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LANDActionsCallbackInterfaces.Add(instance);
            @MOVE.started += instance.OnMOVE;
            @MOVE.performed += instance.OnMOVE;
            @MOVE.canceled += instance.OnMOVE;
            @JUMP.started += instance.OnJUMP;
            @JUMP.performed += instance.OnJUMP;
            @JUMP.canceled += instance.OnJUMP;
        }

        private void UnregisterCallbacks(ILANDActions instance)
        {
            @MOVE.started -= instance.OnMOVE;
            @MOVE.performed -= instance.OnMOVE;
            @MOVE.canceled -= instance.OnMOVE;
            @JUMP.started -= instance.OnJUMP;
            @JUMP.performed -= instance.OnJUMP;
            @JUMP.canceled -= instance.OnJUMP;
        }

        public void RemoveCallbacks(ILANDActions instance)
        {
            if (m_Wrapper.m_LANDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILANDActions instance)
        {
            foreach (var item in m_Wrapper.m_LANDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LANDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LANDActions @LAND => new LANDActions(this);

    // WALL
    private readonly InputActionMap m_WALL;
    private List<IWALLActions> m_WALLActionsCallbackInterfaces = new List<IWALLActions>();
    public struct WALLActions
    {
        private @Controller m_Wrapper;
        public WALLActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_WALL; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WALLActions set) { return set.Get(); }
        public void AddCallbacks(IWALLActions instance)
        {
            if (instance == null || m_Wrapper.m_WALLActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WALLActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IWALLActions instance)
        {
        }

        public void RemoveCallbacks(IWALLActions instance)
        {
            if (m_Wrapper.m_WALLActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWALLActions instance)
        {
            foreach (var item in m_Wrapper.m_WALLActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WALLActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WALLActions @WALL => new WALLActions(this);
    public interface ILANDActions
    {
        void OnMOVE(InputAction.CallbackContext context);
        void OnJUMP(InputAction.CallbackContext context);
    }
    public interface IWALLActions
    {
    }
}
