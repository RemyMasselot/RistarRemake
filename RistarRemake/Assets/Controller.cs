//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Controller.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controller: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""LAND"",
            ""id"": ""0d280664-e35a-4520-9ab0-b94cf2c2ff0b"",
            ""actions"": [
                {
                    ""name"": ""MOVEH"",
                    ""type"": ""Value"",
                    ""id"": ""c6bb8ecd-e53b-4138-9bbd-c1f6bee0de0e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MOVEV"",
                    ""type"": ""Value"",
                    ""id"": ""820da1ca-eeb2-49ec-97a2-d5cfb2902ce0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""Button"",
                    ""id"": ""074f1c53-ea4a-4f0f-ad48-5d7f04de9362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GRAB"",
                    ""type"": ""Button"",
                    ""id"": ""ea1e952e-be62-48cb-94a3-2eb27b08dd57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AIM"",
                    ""type"": ""Value"",
                    ""id"": ""06094fc3-a728-4de6-81ce-5599eae51248"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BACK"",
                    ""type"": ""Button"",
                    ""id"": ""1e225a6b-2573-4803-a800-f5495d96f00a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""59dd6619-c4d8-42cd-aa64-35ea0b056ceb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a6795858-9f2c-42d7-89d5-7f2f6a3ea37c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75d4dd8e-961f-4dab-bed7-f8d7180d030e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""QD"",
                    ""id"": ""b5e3e7ec-bf74-4dca-aefd-27218c223401"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aa97c214-a722-4140-adbb-c23f6872bd95"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d9db7d63-677b-4845-acb8-d5f20026ed57"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GAMEPAD"",
                    ""id"": ""10c0434b-2924-4577-9fc9-bc3acae04d2d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.3)"",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""95542719-9f87-40d8-a305-25830f9ffb9d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""690781d4-3689-48cb-90b2-ce8919fc0e66"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""97eada6c-2c4f-46a4-a48c-4ecff31de6d7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16d3398b-1e37-43cf-99db-6a6a35697cc2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10373dd0-781a-4d91-9369-d246aa96a1c4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94e18429-69db-491d-b7d1-f6606705484d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e4fe697-b48c-4ac5-b902-12c2b8e26f99"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GRAB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c14c81-3052-470a-904a-ea24ca537ea6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GRAB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4510c2cb-c570-4a0e-b30b-460c8db0543a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GRAB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""94b86222-21e3-4949-8501-3d13c6f33698"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AIM"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02ee9b69-144b-4c61-b58b-1923b33f2e16"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AIM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""45583b6b-db44-4946-ab32-f608a0e92149"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AIM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f86a4d78-579b-4340-a8eb-1bfe6c9aaeec"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AIM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fbb0de69-4ccc-4343-b5aa-64fe73589ab9"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AIM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""aef00640-c28a-41ba-bf92-8d8e63fbb718"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""802a0ba0-d4b7-4b0d-be7e-f99fafa0707a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7925ca58-b297-49b7-a5ef-ba561cbef17d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ZS"",
                    ""id"": ""41b72c0b-8f15-4204-8607-2b042ca9c912"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e46a0c64-5e9f-42c8-9de0-f60addf15306"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ade0455f-a071-45a9-ace7-57899453e5d0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GAMEPAD"",
                    ""id"": ""9adfa1a8-9f15-4e59-800d-199c644cc86e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8cbeeb97-b845-45cb-a82f-fbb521267e48"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6a747689-60d5-4d66-b7cc-b1c9e6bbad19"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ffde486-25ad-45f3-9860-9455ee2a3ca3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WALL"",
            ""id"": ""002b5fcb-2601-4f3c-b052-5fd157f2516c"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // LAND
        m_LAND = asset.FindActionMap("LAND", throwIfNotFound: true);
        m_LAND_MOVEH = m_LAND.FindAction("MOVEH", throwIfNotFound: true);
        m_LAND_MOVEV = m_LAND.FindAction("MOVEV", throwIfNotFound: true);
        m_LAND_JUMP = m_LAND.FindAction("JUMP", throwIfNotFound: true);
        m_LAND_GRAB = m_LAND.FindAction("GRAB", throwIfNotFound: true);
        m_LAND_AIM = m_LAND.FindAction("AIM", throwIfNotFound: true);
        m_LAND_BACK = m_LAND.FindAction("BACK", throwIfNotFound: true);
        // WALL
        m_WALL = asset.FindActionMap("WALL", throwIfNotFound: true);
    }

    ~@Controller()
    {
        UnityEngine.Debug.Assert(!m_LAND.enabled, "This will cause a leak and performance issues, Controller.LAND.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_WALL.enabled, "This will cause a leak and performance issues, Controller.WALL.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LAND
    private readonly InputActionMap m_LAND;
    private List<ILANDActions> m_LANDActionsCallbackInterfaces = new List<ILANDActions>();
    private readonly InputAction m_LAND_MOVEH;
    private readonly InputAction m_LAND_MOVEV;
    private readonly InputAction m_LAND_JUMP;
    private readonly InputAction m_LAND_GRAB;
    private readonly InputAction m_LAND_AIM;
    private readonly InputAction m_LAND_BACK;
    /// <summary>
    /// Provides access to input actions defined in input action map "LAND".
    /// </summary>
    public struct LANDActions
    {
        private @Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LANDActions(@Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LAND/MOVEH".
        /// </summary>
        public InputAction @MOVEH => m_Wrapper.m_LAND_MOVEH;
        /// <summary>
        /// Provides access to the underlying input action "LAND/MOVEV".
        /// </summary>
        public InputAction @MOVEV => m_Wrapper.m_LAND_MOVEV;
        /// <summary>
        /// Provides access to the underlying input action "LAND/JUMP".
        /// </summary>
        public InputAction @JUMP => m_Wrapper.m_LAND_JUMP;
        /// <summary>
        /// Provides access to the underlying input action "LAND/GRAB".
        /// </summary>
        public InputAction @GRAB => m_Wrapper.m_LAND_GRAB;
        /// <summary>
        /// Provides access to the underlying input action "LAND/AIM".
        /// </summary>
        public InputAction @AIM => m_Wrapper.m_LAND_AIM;
        /// <summary>
        /// Provides access to the underlying input action "LAND/BACK".
        /// </summary>
        public InputAction @BACK => m_Wrapper.m_LAND_BACK;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LAND; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LANDActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LANDActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LANDActions" />
        public void AddCallbacks(ILANDActions instance)
        {
            if (instance == null || m_Wrapper.m_LANDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LANDActionsCallbackInterfaces.Add(instance);
            @MOVEH.started += instance.OnMOVEH;
            @MOVEH.performed += instance.OnMOVEH;
            @MOVEH.canceled += instance.OnMOVEH;
            @MOVEV.started += instance.OnMOVEV;
            @MOVEV.performed += instance.OnMOVEV;
            @MOVEV.canceled += instance.OnMOVEV;
            @JUMP.started += instance.OnJUMP;
            @JUMP.performed += instance.OnJUMP;
            @JUMP.canceled += instance.OnJUMP;
            @GRAB.started += instance.OnGRAB;
            @GRAB.performed += instance.OnGRAB;
            @GRAB.canceled += instance.OnGRAB;
            @AIM.started += instance.OnAIM;
            @AIM.performed += instance.OnAIM;
            @AIM.canceled += instance.OnAIM;
            @BACK.started += instance.OnBACK;
            @BACK.performed += instance.OnBACK;
            @BACK.canceled += instance.OnBACK;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LANDActions" />
        private void UnregisterCallbacks(ILANDActions instance)
        {
            @MOVEH.started -= instance.OnMOVEH;
            @MOVEH.performed -= instance.OnMOVEH;
            @MOVEH.canceled -= instance.OnMOVEH;
            @MOVEV.started -= instance.OnMOVEV;
            @MOVEV.performed -= instance.OnMOVEV;
            @MOVEV.canceled -= instance.OnMOVEV;
            @JUMP.started -= instance.OnJUMP;
            @JUMP.performed -= instance.OnJUMP;
            @JUMP.canceled -= instance.OnJUMP;
            @GRAB.started -= instance.OnGRAB;
            @GRAB.performed -= instance.OnGRAB;
            @GRAB.canceled -= instance.OnGRAB;
            @AIM.started -= instance.OnAIM;
            @AIM.performed -= instance.OnAIM;
            @AIM.canceled -= instance.OnAIM;
            @BACK.started -= instance.OnBACK;
            @BACK.performed -= instance.OnBACK;
            @BACK.canceled -= instance.OnBACK;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LANDActions.UnregisterCallbacks(ILANDActions)" />.
        /// </summary>
        /// <seealso cref="LANDActions.UnregisterCallbacks(ILANDActions)" />
        public void RemoveCallbacks(ILANDActions instance)
        {
            if (m_Wrapper.m_LANDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LANDActions.AddCallbacks(ILANDActions)" />
        /// <seealso cref="LANDActions.RemoveCallbacks(ILANDActions)" />
        /// <seealso cref="LANDActions.UnregisterCallbacks(ILANDActions)" />
        public void SetCallbacks(ILANDActions instance)
        {
            foreach (var item in m_Wrapper.m_LANDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LANDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LANDActions" /> instance referencing this action map.
    /// </summary>
    public LANDActions @LAND => new LANDActions(this);

    // WALL
    private readonly InputActionMap m_WALL;
    private List<IWALLActions> m_WALLActionsCallbackInterfaces = new List<IWALLActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "WALL".
    /// </summary>
    public struct WALLActions
    {
        private @Controller m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public WALLActions(@Controller wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_WALL; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="WALLActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(WALLActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="WALLActions" />
        public void AddCallbacks(IWALLActions instance)
        {
            if (instance == null || m_Wrapper.m_WALLActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WALLActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="WALLActions" />
        private void UnregisterCallbacks(IWALLActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="WALLActions.UnregisterCallbacks(IWALLActions)" />.
        /// </summary>
        /// <seealso cref="WALLActions.UnregisterCallbacks(IWALLActions)" />
        public void RemoveCallbacks(IWALLActions instance)
        {
            if (m_Wrapper.m_WALLActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="WALLActions.AddCallbacks(IWALLActions)" />
        /// <seealso cref="WALLActions.RemoveCallbacks(IWALLActions)" />
        /// <seealso cref="WALLActions.UnregisterCallbacks(IWALLActions)" />
        public void SetCallbacks(IWALLActions instance)
        {
            foreach (var item in m_Wrapper.m_WALLActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WALLActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="WALLActions" /> instance referencing this action map.
    /// </summary>
    public WALLActions @WALL => new WALLActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LAND" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LANDActions.AddCallbacks(ILANDActions)" />
    /// <seealso cref="LANDActions.RemoveCallbacks(ILANDActions)" />
    public interface ILANDActions
    {
        /// <summary>
        /// Method invoked when associated input action "MOVEH" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMOVEH(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MOVEV" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMOVEV(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "JUMP" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJUMP(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GRAB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGRAB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AIM" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAIM(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "BACK" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBACK(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "WALL" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="WALLActions.AddCallbacks(IWALLActions)" />
    /// <seealso cref="WALLActions.RemoveCallbacks(IWALLActions)" />
    public interface IWALLActions
    {
    }
}
